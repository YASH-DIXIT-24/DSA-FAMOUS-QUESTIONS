class Solution{
public:
    Node* divide(int N, Node *head)
    {
     if(!head)
     return NULL;
     
     Node* curr=head;
     Node* evenstart=NULL;
     Node* oddstart=NULL;
     Node* evenend=NULL;
     Node* oddend=NULL;
     
     while(curr!=NULL)
     {
         if(curr->data%2==0)
         {
             if(!evenstart)
             {
             evenstart=curr;
             evenend=curr;
             }
             else
             {
             evenend->next=curr;  
             evenend=evenend->next;
             }
         }
         else
         {
             if(!oddstart)
             {
             oddstart=curr;
             oddend=curr;
             }
             else
             {
             oddend->next=curr;  
             oddend=oddend->next;
             }
         }
         curr=curr->next;
     }
     if(evenstart && oddstart)
     {
     oddend->next=NULL;
     evenend->next=oddstart;
     return evenstart;
     }
     else if(!oddstart)
     {
         evenend->next=NULL;
         return evenstart;
     }
     else
     {
         oddend->next=NULL;
         return oddstart;
     }
    }
};