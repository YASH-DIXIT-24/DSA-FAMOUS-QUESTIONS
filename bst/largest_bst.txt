class Solution{
    public:
    /*You are required to complete this method */
    // Return the size of the largest sub-tree which is also a BST
    struct bst
    {
      int size;
      int max;
      int min;
      int ans;
      bool isbst;
    };
    
    bst checkbst(Node* root)
    {
        if(!root)
        return {0,INT_MIN,INT_MAX,0,true};
        
        if(!root->left && !root->right)
        {
            return {1,root->data,root->data,1,true};
        }
        
        bst linfo=checkbst(root->left);
        bst rinfo=checkbst(root->right);
        
        bst curr;
        if(linfo.isbst && rinfo.isbst && linfo.max<root->data && rinfo.min>root->data)
        {
            curr.size=1+linfo.size+rinfo.size;
            curr.max=max(root->data,max(linfo.max,rinfo.max));
            curr.min=min(root->data,min(linfo.min,rinfo.min));
            
            curr.ans=curr.size;
            
            curr.isbst=true;
            return curr;
            
        }
        
        curr.ans=max(linfo.ans,rinfo.ans);
        curr.isbst=false;
        
        return curr;
        
    }
    int largestBst(Node *root)
    {
    	bst b=checkbst(root);
    	return b.ans;
    }
};