bool isIdentical(Node *r1, Node *r2)
    {
        if(!r1 && !r2)
        return true;
        
        if(!r1 || !r2)
        return false;
        
        if(r1->data!=r2->data)
        return false;
        
        return isIdentical(r1->left,r2->left)&&isIdentical(r1->right,r2->right);
        
        
    }
    //Function to check if S is a subtree of tree T.
    bool isSubTree(Node* T, Node* S) 
    {
       if(!T)
       return false;
       
       queue<Node*> q;
       q.push(T);
       
       while(!q.empty())
       {
           Node * temp=q.front();
           q.pop();
           if(temp->data==S->data)
           {
           if(isIdentical(temp,S))
           return true;
           }
           
           if(temp->left)
           q.push(temp->left);
           
           if(temp->right)
           q.push(temp->right);
       }
       
       return false;
        
    }